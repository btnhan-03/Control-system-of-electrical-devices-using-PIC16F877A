

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat Jul 29 15:09:05 2023

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170                           
   171                           	psect	idataBANK0
   172  064B                     __pidataBANK0:
   173                           
   174                           ;initializer for _ArrayLed
   175  064B  34C0               	retlw	192
   176  064C  34F9               	retlw	249
   177  064D  34A4               	retlw	164
   178  064E  34B0               	retlw	176
   179  064F  3499               	retlw	153
   180  0650  3492               	retlw	146
   181  0651  3482               	retlw	130
   182  0652  34F8               	retlw	248
   183  0653  3480               	retlw	128
   184  0654  3490               	retlw	144
   185  0008                     _PORTD	set	8
   186  0007                     _PORTC	set	7
   187  0006                     _PORTB	set	6
   188  0005                     _PORTA	set	5
   189  0088                     _TRISD	set	136
   190  0085                     _TRISA	set	133
   191  0087                     _TRISC	set	135
   192  0086                     _TRISB	set	134
   193                           
   194                           	psect	cinit
   195  07EC                     start_initialization:	
   196                           ; #config settings
   197                           
   198  07EC                     __initialization:
   199                           
   200                           ; Initialize objects allocated to BANK0
   201  07EC  1383               	bcf	3,7	;select IRP bank0
   202  07ED  302A               	movlw	low (__pdataBANK0+10)
   203  07EE  00FD               	movwf	btemp+-1
   204  07EF  3006               	movlw	high __pidataBANK0
   205  07F0  00FE               	movwf	btemp
   206  07F1  304B               	movlw	low __pidataBANK0
   207  07F2  00FF               	movwf	btemp+1
   208  07F3  3020               	movlw	low __pdataBANK0
   209  07F4  0084               	movwf	4
   210  07F5  120A  118A  2659  120A  118A  	fcall	init_ram0
   211                           
   212                           ; Clear objects allocated to COMMON
   213  07FA  01FB               	clrf	__pbssCOMMON& (0+127)
   214  07FB  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   215  07FC                     end_of_initialization:	
   216                           ;End of C runtime variable initialization code
   217                           
   218  07FC                     __end_of__initialization:
   219  07FC  0183               	clrf	3
   220  07FD  120A  118A  2F28   	ljmp	_main	;jump to C main() function
   221                           
   222                           	psect	bssCOMMON
   223  007B                     __pbssCOMMON:
   224  007B                     _count:
   225  007B                     	ds	2
   226                           
   227                           	psect	dataBANK0
   228  0020                     __pdataBANK0:
   229  0020                     _ArrayLed:
   230  0020                     	ds	10
   231                           
   232                           	psect	inittext
   233  0655                     init_fetch0:	
   234                           ;	Called with low address in FSR and high address in W
   235                           
   236  0655  087E               	movf	btemp,w
   237  0656  008A               	movwf	10
   238  0657  087F               	movf	btemp+1,w
   239  0658  0082               	movwf	2
   240  0659                     init_ram0:	
   241                           ;Called with:
   242                           ;	high address of idata address in btemp 
   243                           ;	low address of idata address in btemp+1 
   244                           ;	low address of data in FSR
   245                           ;	high address + 1 of data in btemp-1
   246                           
   247  0659  120A  118A  2655  120A  118A  	fcall	init_fetch0
   248  065E  0080               	movwf	0
   249  065F  0A84               	incf	4,f
   250  0660  0804               	movf	4,w
   251  0661  067D               	xorwf	btemp+-1,w
   252  0662  1903               	btfsc	3,2
   253  0663  3400               	retlw	0
   254  0664  0AFF               	incf	btemp+1,f
   255  0665  1903               	btfsc	3,2
   256  0666  0AFE               	incf	btemp,f
   257  0667  2E59               	goto	init_ram0
   258                           
   259                           	psect	cstackCOMMON
   260  0070                     __pcstackCOMMON:
   261  0070                     ?_main:
   262  0070                     ?___awdiv:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?___awmod:	
   266                           ; 2 bytes @ 0x0
   267                           
   268  0070                     ___awdiv@divisor:	
   269                           ; 2 bytes @ 0x0
   270                           
   271  0070                     ___awmod@divisor:	
   272                           ; 2 bytes @ 0x0
   273                           
   274                           
   275                           ; 2 bytes @ 0x0
   276  0070                     	ds	2
   277  0072                     ___awdiv@dividend:
   278  0072                     ___awmod@dividend:	
   279                           ; 2 bytes @ 0x2
   280                           
   281                           
   282                           ; 2 bytes @ 0x2
   283  0072                     	ds	2
   284  0074                     ??___awdiv:
   285  0074                     ??___awmod:	
   286                           ; 1 bytes @ 0x4
   287                           
   288  0074                     ___awdiv@counter:	
   289                           ; 1 bytes @ 0x4
   290                           
   291  0074                     ___awmod@counter:	
   292                           ; 1 bytes @ 0x4
   293                           
   294                           
   295                           ; 1 bytes @ 0x4
   296  0074                     	ds	1
   297  0075                     ___awdiv@sign:
   298  0075                     ___awmod@sign:	
   299                           ; 1 bytes @ 0x5
   300                           
   301                           
   302                           ; 1 bytes @ 0x5
   303  0075                     	ds	1
   304  0076                     ___awdiv@quotient:
   305                           
   306                           ; 2 bytes @ 0x6
   307  0076                     	ds	2
   308  0078                     ??_main:
   309                           
   310                           ; 1 bytes @ 0x8
   311  0078                     	ds	3
   312                           
   313                           	psect	maintext
   314  0728                     __pmaintext:	
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 20 in file "doan03.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;		None
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : B00/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   334 ;;      Params:         0       0       0       0       0
   335 ;;      Locals:         0       0       0       0       0
   336 ;;      Temps:          3       0       0       0       0
   337 ;;      Totals:         3       0       0       0       0
   338 ;;Total ram usage:        3 bytes
   339 ;; Hardware stack levels required when called:    1
   340 ;; This function calls:
   341 ;;		___awdiv
   342 ;;		___awmod
   343 ;; This function is called by:
   344 ;;		Startup code after reset
   345 ;; This function uses a non-reentrant model
   346 ;;
   347                           
   348                           
   349                           ;psect for function _main
   350  0728                     _main:
   351  0728                     l851:	
   352                           ;incstack = 0
   353                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   354                           
   355                           
   356                           ;doan03.c: 22:             if(count<20)
   357  0728  3080               	movlw	128
   358  0729  1683               	bsf	3,5	;RP0=1, select bank1
   359  072A  1303               	bcf	3,6	;RP1=0, select bank1
   360  072B  0086               	movwf	6	;volatile
   361                           
   362                           ;doan03.c: 23:             {
   363  072C  3007               	movlw	7
   364  072D  0087               	movwf	7	;volatile
   365  072E                     l853:
   366                           
   367                           ;doan03.c: 24:                 (*(volatile Type_bitA*)0x05).RA0=0;
   368  072E  0185               	clrf	5	;volatile
   369  072F                     l855:
   370                           
   371                           ;doan03.c: 25:             }
   372  072F  1283               	bcf	3,5	;RP0=0, select bank0
   373  0730  1303               	bcf	3,6	;RP1=0, select bank0
   374  0731  0185               	clrf	5	;volatile
   375  0732                     l857:
   376                           
   377                           ;doan03.c: 26:             if(count>=20)
   378  0732  0186               	clrf	6	;volatile
   379  0733                     l859:
   380                           
   381                           ;doan03.c: 27:             {
   382  0733  0187               	clrf	7	;volatile
   383  0734                     l861:
   384                           
   385                           ;doan03.c: 28:                 (*(volatile Type_bitA*)0x05).RA0=1;
   386  0734  0188               	clrf	8	;volatile
   387  0735                     l863:
   388                           
   389                           ;doan03.c: 29:             }
   390  0735  1683               	bsf	3,5	;RP0=1, select bank1
   391  0736  1303               	bcf	3,6	;RP1=0, select bank1
   392  0737  0188               	clrf	8	;volatile
   393  0738                     l865:
   394                           
   395                           ;doan03.c: 33:             };doan03.c: 34:         }
   396  0738  1283               	bcf	3,5	;RP0=0, select bank0
   397  0739  1303               	bcf	3,6	;RP1=0, select bank0
   398  073A  1F86               	btfss	6,7	;volatile
   399  073B  2F3D               	goto	u491
   400  073C  2F3E               	goto	u490
   401  073D                     u491:
   402  073D  2F42               	goto	l869
   403  073E                     u490:
   404  073E                     l867:
   405  073E  1807               	btfsc	7,0	;volatile
   406  073F  2F41               	goto	u501
   407  0740  2F42               	goto	u500
   408  0741                     u501:
   409  0741  2F72               	goto	l28
   410  0742                     u500:
   411  0742                     l869:
   412                           
   413                           ;doan03.c: 35:        else if((*(volatile Type_bitC*)0x07).RC1==0||(*(volatile Type_bitC
      +                          *)0x07).RC2==0);doan03.c: 36:         {
   414  0742  3001               	movlw	1
   415  0743  07FB               	addwf	_count,f
   416  0744  1803               	skipnc
   417  0745  0AFC               	incf	_count+1,f
   418  0746  3000               	movlw	0
   419  0747  07FC               	addwf	_count+1,f
   420  0748                     l871:
   421                           
   422                           ;doan03.c: 38:              if(count<=0)
   423  0748  087C               	movf	_count+1,w
   424  0749  3A80               	xorlw	128
   425  074A  00FF               	movwf	btemp+1
   426  074B  3080               	movlw	128
   427  074C  027F               	subwf	btemp+1,w
   428  074D  1D03               	skipz
   429  074E  2F51               	goto	u515
   430  074F  3014               	movlw	20
   431  0750  027B               	subwf	_count,w
   432  0751                     u515:
   433  0751  1803               	skipnc
   434  0752  2F54               	goto	u511
   435  0753  2F55               	goto	u510
   436  0754                     u511:
   437  0754  2F58               	goto	l875
   438  0755                     u510:
   439  0755                     l873:
   440                           
   441                           ;doan03.c: 39:         {;doan03.c: 40:             count=99;
   442  0755  1283               	bcf	3,5	;RP0=0, select bank0
   443  0756  1303               	bcf	3,6	;RP1=0, select bank0
   444  0757  1005               	bcf	5,0	;volatile
   445  0758                     l875:
   446                           
   447                           ;doan03.c: 42:             if(count<20)
   448  0758  087C               	movf	_count+1,w
   449  0759  3A80               	xorlw	128
   450  075A  00FF               	movwf	btemp+1
   451  075B  3080               	movlw	128
   452  075C  027F               	subwf	btemp+1,w
   453  075D  1D03               	skipz
   454  075E  2F61               	goto	u525
   455  075F  3014               	movlw	20
   456  0760  027B               	subwf	_count,w
   457  0761                     u525:
   458  0761  1C03               	skipc
   459  0762  2F64               	goto	u521
   460  0763  2F65               	goto	u520
   461  0764                     u521:
   462  0764  2F68               	goto	l879
   463  0765                     u520:
   464  0765                     l877:
   465                           
   466                           ;doan03.c: 43:             {;doan03.c: 44:                 (*(volatile Type_bitA*)0x05).
      +                          RA0=0;
   467  0765  1283               	bcf	3,5	;RP0=0, select bank0
   468  0766  1303               	bcf	3,6	;RP1=0, select bank0
   469  0767  1405               	bsf	5,0	;volatile
   470  0768                     l879:
   471                           
   472                           ;doan03.c: 46:             if(count>=20)
   473  0768  3064               	movlw	100
   474  0769  067B               	xorwf	_count,w
   475  076A  047C               	iorwf	_count+1,w
   476  076B  1D03               	btfss	3,2
   477  076C  2F6E               	goto	u531
   478  076D  2F6F               	goto	u530
   479  076E                     u531:
   480  076E  2FB1               	goto	l899
   481  076F                     u530:
   482  076F                     l881:
   483                           
   484                           ;doan03.c: 47:             {;doan03.c: 48:                 (*(volatile Type_bitA*)0x05).
      +                          RA0=1;
   485  076F  01FB               	clrf	_count
   486  0770  01FC               	clrf	_count+1
   487  0771  2FB1               	goto	l899
   488  0772                     l28:	
   489                           ;doan03.c: 51:         PORTD=ArrayLed[count%10];
   490                           
   491  0772  1C87               	btfss	7,1	;volatile
   492  0773  2F75               	goto	u541
   493  0774  2F76               	goto	u540
   494  0775                     u541:
   495  0775  2F7A               	goto	l885
   496  0776                     u540:
   497  0776                     l883:
   498  0776  1907               	btfsc	7,2	;volatile
   499  0777  2F79               	goto	u551
   500  0778  2F7A               	goto	u550
   501  0779                     u551:
   502  0779  2FB1               	goto	l899
   503  077A                     u550:
   504  077A                     l885:
   505                           
   506                           ;doan03.c: 52:         PORTB=ArrayLed[count/10];;doan03.c: 53:         _delay((unsigned 
      +                          long)((1000)*(20000000/4000.0)));
   507  077A  30FF               	movlw	255
   508  077B  07FB               	addwf	_count,f
   509  077C  1803               	skipnc
   510  077D  0AFC               	incf	_count+1,f
   511  077E  30FF               	movlw	255
   512  077F  07FC               	addwf	_count+1,f
   513  0780                     l887:
   514                           
   515                           ;doan03.c: 54:     }
   516  0780  087C               	movf	_count+1,w
   517  0781  3A80               	xorlw	128
   518  0782  00FF               	movwf	btemp+1
   519  0783  3080               	movlw	128
   520  0784  027F               	subwf	btemp+1,w
   521  0785  1D03               	skipz
   522  0786  2F89               	goto	u565
   523  0787  3001               	movlw	1
   524  0788  027B               	subwf	_count,w
   525  0789                     u565:
   526  0789  1803               	skipnc
   527  078A  2F8C               	goto	u561
   528  078B  2F8D               	goto	u560
   529  078C                     u561:
   530  078C  2F91               	goto	l891
   531  078D                     u560:
   532  078D                     l889:
   533                           
   534                           ;doan03.c: 55: }
   535  078D  3063               	movlw	99
   536  078E  00FB               	movwf	_count
   537  078F  3000               	movlw	0
   538  0790  00FC               	movwf	_count+1
   539  0791                     l891:
   540  0791  087C               	movf	_count+1,w
   541  0792  3A80               	xorlw	128
   542  0793  00FF               	movwf	btemp+1
   543  0794  3080               	movlw	128
   544  0795  027F               	subwf	btemp+1,w
   545  0796  1D03               	skipz
   546  0797  2F9A               	goto	u575
   547  0798  3014               	movlw	20
   548  0799  027B               	subwf	_count,w
   549  079A                     u575:
   550  079A  1803               	skipnc
   551  079B  2F9D               	goto	u571
   552  079C  2F9E               	goto	u570
   553  079D                     u571:
   554  079D  2FA1               	goto	l895
   555  079E                     u570:
   556  079E                     l893:
   557  079E  1283               	bcf	3,5	;RP0=0, select bank0
   558  079F  1303               	bcf	3,6	;RP1=0, select bank0
   559  07A0  1005               	bcf	5,0	;volatile
   560  07A1                     l895:
   561  07A1  087C               	movf	_count+1,w
   562  07A2  3A80               	xorlw	128
   563  07A3  00FF               	movwf	btemp+1
   564  07A4  3080               	movlw	128
   565  07A5  027F               	subwf	btemp+1,w
   566  07A6  1D03               	skipz
   567  07A7  2FAA               	goto	u585
   568  07A8  3014               	movlw	20
   569  07A9  027B               	subwf	_count,w
   570  07AA                     u585:
   571  07AA  1C03               	skipc
   572  07AB  2FAD               	goto	u581
   573  07AC  2FAE               	goto	u580
   574  07AD                     u581:
   575  07AD  2FB1               	goto	l899
   576  07AE                     u580:
   577  07AE                     l897:
   578  07AE  1283               	bcf	3,5	;RP0=0, select bank0
   579  07AF  1303               	bcf	3,6	;RP1=0, select bank0
   580  07B0  1405               	bsf	5,0	;volatile
   581  07B1                     l899:
   582  07B1  300A               	movlw	10
   583  07B2  00F0               	movwf	___awmod@divisor
   584  07B3  3000               	movlw	0
   585  07B4  00F1               	movwf	___awmod@divisor+1
   586  07B5  087C               	movf	_count+1,w
   587  07B6  00F3               	movwf	___awmod@dividend+1
   588  07B7  087B               	movf	_count,w
   589  07B8  00F2               	movwf	___awmod@dividend
   590  07B9  120A  118A  2668  120A  118A  	fcall	___awmod
   591  07BE  0870               	movf	?___awmod,w
   592  07BF  3E20               	addlw	(low (_ArrayLed| 0))& (0+255)
   593  07C0  0084               	movwf	4
   594  07C1  1383               	bcf	3,7	;select IRP bank0
   595  07C2  0800               	movf	0,w
   596  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   597  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   598  07C5  0088               	movwf	8	;volatile
   599  07C6  300A               	movlw	10
   600  07C7  00F0               	movwf	___awdiv@divisor
   601  07C8  3000               	movlw	0
   602  07C9  00F1               	movwf	___awdiv@divisor+1
   603  07CA  087C               	movf	_count+1,w
   604  07CB  00F3               	movwf	___awdiv@dividend+1
   605  07CC  087B               	movf	_count,w
   606  07CD  00F2               	movwf	___awdiv@dividend
   607  07CE  120A  118A  26C1  120A  118A  	fcall	___awdiv
   608  07D3  0870               	movf	?___awdiv,w
   609  07D4  3E20               	addlw	(low (_ArrayLed| 0))& (0+255)
   610  07D5  0084               	movwf	4
   611  07D6  1383               	bcf	3,7	;select IRP bank0
   612  07D7  0800               	movf	0,w
   613  07D8  1283               	bcf	3,5	;RP0=0, select bank0
   614  07D9  1303               	bcf	3,6	;RP1=0, select bank0
   615  07DA  0086               	movwf	6	;volatile
   616  07DB                     l901:
   617  07DB  301A               	movlw	26
   618  07DC  00FA               	movwf	??_main+2
   619  07DD  305E               	movlw	94
   620  07DE  00F9               	movwf	??_main+1
   621  07DF  306E               	movlw	110
   622  07E0  00F8               	movwf	??_main
   623  07E1                     u597:
   624  07E1  0BF8               	decfsz	??_main,f
   625  07E2  2FE1               	goto	u597
   626  07E3  0BF9               	decfsz	??_main+1,f
   627  07E4  2FE1               	goto	u597
   628  07E5  0BFA               	decfsz	??_main+2,f
   629  07E6  2FE1               	goto	u597
   630  07E7  0000               	nop
   631  07E8  2F38               	goto	l865
   632  07E9  120A  118A  2800   	ljmp	start
   633  07EC                     __end_of_main:
   634                           
   635                           	psect	text1
   636  0668                     __ptext1:	
   637 ;; *************** function ___awmod *****************
   638 ;; Defined at:
   639 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  divisor         2    0[COMMON] int 
   642 ;;  dividend        2    2[COMMON] int 
   643 ;; Auto vars:     Size  Location     Type
   644 ;;  sign            1    5[COMMON] unsigned char 
   645 ;;  counter         1    4[COMMON] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  2    0[COMMON] int 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0, btemp+1
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   655 ;;      Params:         4       0       0       0       0
   656 ;;      Locals:         2       0       0       0       0
   657 ;;      Temps:          0       0       0       0       0
   658 ;;      Totals:         6       0       0       0       0
   659 ;;Total ram usage:        6 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; This function calls:
   662 ;;		Nothing
   663 ;; This function is called by:
   664 ;;		_main
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           
   669                           ;psect for function ___awmod
   670  0668                     ___awmod:
   671  0668                     l813:	
   672                           ;incstack = 0
   673                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
   674                           
   675  0668  01F5               	clrf	___awmod@sign
   676  0669                     l815:
   677  0669  1FF3               	btfss	___awmod@dividend+1,7
   678  066A  2E6C               	goto	u401
   679  066B  2E6D               	goto	u400
   680  066C                     u401:
   681  066C  2E74               	goto	l821
   682  066D                     u400:
   683  066D                     l817:
   684  066D  09F2               	comf	___awmod@dividend,f
   685  066E  09F3               	comf	___awmod@dividend+1,f
   686  066F  0AF2               	incf	___awmod@dividend,f
   687  0670  1903               	skipnz
   688  0671  0AF3               	incf	___awmod@dividend+1,f
   689  0672                     l819:
   690  0672  01F5               	clrf	___awmod@sign
   691  0673  0AF5               	incf	___awmod@sign,f
   692  0674                     l821:
   693  0674  1FF1               	btfss	___awmod@divisor+1,7
   694  0675  2E77               	goto	u411
   695  0676  2E78               	goto	u410
   696  0677                     u411:
   697  0677  2E7D               	goto	l825
   698  0678                     u410:
   699  0678                     l823:
   700  0678  09F0               	comf	___awmod@divisor,f
   701  0679  09F1               	comf	___awmod@divisor+1,f
   702  067A  0AF0               	incf	___awmod@divisor,f
   703  067B  1903               	skipnz
   704  067C  0AF1               	incf	___awmod@divisor+1,f
   705  067D                     l825:
   706  067D  0870               	movf	___awmod@divisor,w
   707  067E  0471               	iorwf	___awmod@divisor+1,w
   708  067F  1903               	btfsc	3,2
   709  0680  2E82               	goto	u421
   710  0681  2E83               	goto	u420
   711  0682                     u421:
   712  0682  2EB2               	goto	l843
   713  0683                     u420:
   714  0683                     l827:
   715  0683  01F4               	clrf	___awmod@counter
   716  0684  0AF4               	incf	___awmod@counter,f
   717  0685  2E91               	goto	l833
   718  0686                     l829:
   719  0686  3001               	movlw	1
   720  0687                     u435:
   721  0687  1003               	clrc
   722  0688  0DF0               	rlf	___awmod@divisor,f
   723  0689  0DF1               	rlf	___awmod@divisor+1,f
   724  068A  3EFF               	addlw	-1
   725  068B  1D03               	skipz
   726  068C  2E87               	goto	u435
   727  068D                     l831:
   728  068D  3001               	movlw	1
   729  068E  00FF               	movwf	btemp+1
   730  068F  087F               	movf	btemp+1,w
   731  0690  07F4               	addwf	___awmod@counter,f
   732  0691                     l833:
   733  0691  1FF1               	btfss	___awmod@divisor+1,7
   734  0692  2E94               	goto	u441
   735  0693  2E95               	goto	u440
   736  0694                     u441:
   737  0694  2E86               	goto	l829
   738  0695                     u440:
   739  0695                     l835:
   740  0695  0871               	movf	___awmod@divisor+1,w
   741  0696  0273               	subwf	___awmod@dividend+1,w
   742  0697  1D03               	skipz
   743  0698  2E9B               	goto	u455
   744  0699  0870               	movf	___awmod@divisor,w
   745  069A  0272               	subwf	___awmod@dividend,w
   746  069B                     u455:
   747  069B  1C03               	skipc
   748  069C  2E9E               	goto	u451
   749  069D  2E9F               	goto	u450
   750  069E                     u451:
   751  069E  2EA5               	goto	l839
   752  069F                     u450:
   753  069F                     l837:
   754  069F  0870               	movf	___awmod@divisor,w
   755  06A0  02F2               	subwf	___awmod@dividend,f
   756  06A1  0871               	movf	___awmod@divisor+1,w
   757  06A2  1C03               	skipc
   758  06A3  03F3               	decf	___awmod@dividend+1,f
   759  06A4  02F3               	subwf	___awmod@dividend+1,f
   760  06A5                     l839:
   761  06A5  3001               	movlw	1
   762  06A6                     u465:
   763  06A6  1003               	clrc
   764  06A7  0CF1               	rrf	___awmod@divisor+1,f
   765  06A8  0CF0               	rrf	___awmod@divisor,f
   766  06A9  3EFF               	addlw	-1
   767  06AA  1D03               	skipz
   768  06AB  2EA6               	goto	u465
   769  06AC                     l841:
   770  06AC  3001               	movlw	1
   771  06AD  02F4               	subwf	___awmod@counter,f
   772  06AE  1D03               	btfss	3,2
   773  06AF  2EB1               	goto	u471
   774  06B0  2EB2               	goto	u470
   775  06B1                     u471:
   776  06B1  2E95               	goto	l835
   777  06B2                     u470:
   778  06B2                     l843:
   779  06B2  0875               	movf	___awmod@sign,w
   780  06B3  1903               	btfsc	3,2
   781  06B4  2EB6               	goto	u481
   782  06B5  2EB7               	goto	u480
   783  06B6                     u481:
   784  06B6  2EBC               	goto	l847
   785  06B7                     u480:
   786  06B7                     l845:
   787  06B7  09F2               	comf	___awmod@dividend,f
   788  06B8  09F3               	comf	___awmod@dividend+1,f
   789  06B9  0AF2               	incf	___awmod@dividend,f
   790  06BA  1903               	skipnz
   791  06BB  0AF3               	incf	___awmod@dividend+1,f
   792  06BC                     l847:
   793  06BC  0873               	movf	___awmod@dividend+1,w
   794  06BD  00F1               	movwf	?___awmod+1
   795  06BE  0872               	movf	___awmod@dividend,w
   796  06BF  00F0               	movwf	?___awmod
   797  06C0                     l295:
   798  06C0  0008               	return
   799  06C1                     __end_of___awmod:
   800                           
   801                           	psect	text2
   802  06C1                     __ptext2:	
   803 ;; *************** function ___awdiv *****************
   804 ;; Defined at:
   805 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;  divisor         2    0[COMMON] int 
   808 ;;  dividend        2    2[COMMON] int 
   809 ;; Auto vars:     Size  Location     Type
   810 ;;  quotient        2    6[COMMON] int 
   811 ;;  sign            1    5[COMMON] unsigned char 
   812 ;;  counter         1    4[COMMON] unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  2    0[COMMON] int 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0, btemp+1
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   822 ;;      Params:         4       0       0       0       0
   823 ;;      Locals:         4       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0
   825 ;;      Totals:         8       0       0       0       0
   826 ;;Total ram usage:        8 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; This function calls:
   829 ;;		Nothing
   830 ;; This function is called by:
   831 ;;		_main
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           
   836                           ;psect for function ___awdiv
   837  06C1                     ___awdiv:
   838  06C1                     l769:	
   839                           ;incstack = 0
   840                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
   841                           
   842  06C1  01F5               	clrf	___awdiv@sign
   843  06C2                     l771:
   844  06C2  1FF1               	btfss	___awdiv@divisor+1,7
   845  06C3  2EC5               	goto	u301
   846  06C4  2EC6               	goto	u300
   847  06C5                     u301:
   848  06C5  2ECD               	goto	l777
   849  06C6                     u300:
   850  06C6                     l773:
   851  06C6  09F0               	comf	___awdiv@divisor,f
   852  06C7  09F1               	comf	___awdiv@divisor+1,f
   853  06C8  0AF0               	incf	___awdiv@divisor,f
   854  06C9  1903               	skipnz
   855  06CA  0AF1               	incf	___awdiv@divisor+1,f
   856  06CB                     l775:
   857  06CB  01F5               	clrf	___awdiv@sign
   858  06CC  0AF5               	incf	___awdiv@sign,f
   859  06CD                     l777:
   860  06CD  1FF3               	btfss	___awdiv@dividend+1,7
   861  06CE  2ED0               	goto	u311
   862  06CF  2ED1               	goto	u310
   863  06D0                     u311:
   864  06D0  2EDA               	goto	l783
   865  06D1                     u310:
   866  06D1                     l779:
   867  06D1  09F2               	comf	___awdiv@dividend,f
   868  06D2  09F3               	comf	___awdiv@dividend+1,f
   869  06D3  0AF2               	incf	___awdiv@dividend,f
   870  06D4  1903               	skipnz
   871  06D5  0AF3               	incf	___awdiv@dividend+1,f
   872  06D6                     l781:
   873  06D6  3001               	movlw	1
   874  06D7  00FF               	movwf	btemp+1
   875  06D8  087F               	movf	btemp+1,w
   876  06D9  06F5               	xorwf	___awdiv@sign,f
   877  06DA                     l783:
   878  06DA  01F6               	clrf	___awdiv@quotient
   879  06DB  01F7               	clrf	___awdiv@quotient+1
   880  06DC                     l785:
   881  06DC  0870               	movf	___awdiv@divisor,w
   882  06DD  0471               	iorwf	___awdiv@divisor+1,w
   883  06DE  1903               	btfsc	3,2
   884  06DF  2EE1               	goto	u321
   885  06E0  2EE2               	goto	u320
   886  06E1                     u321:
   887  06E1  2F19               	goto	l805
   888  06E2                     u320:
   889  06E2                     l787:
   890  06E2  01F4               	clrf	___awdiv@counter
   891  06E3  0AF4               	incf	___awdiv@counter,f
   892  06E4  2EF0               	goto	l793
   893  06E5                     l789:
   894  06E5  3001               	movlw	1
   895  06E6                     u335:
   896  06E6  1003               	clrc
   897  06E7  0DF0               	rlf	___awdiv@divisor,f
   898  06E8  0DF1               	rlf	___awdiv@divisor+1,f
   899  06E9  3EFF               	addlw	-1
   900  06EA  1D03               	skipz
   901  06EB  2EE6               	goto	u335
   902  06EC                     l791:
   903  06EC  3001               	movlw	1
   904  06ED  00FF               	movwf	btemp+1
   905  06EE  087F               	movf	btemp+1,w
   906  06EF  07F4               	addwf	___awdiv@counter,f
   907  06F0                     l793:
   908  06F0  1FF1               	btfss	___awdiv@divisor+1,7
   909  06F1  2EF3               	goto	u341
   910  06F2  2EF4               	goto	u340
   911  06F3                     u341:
   912  06F3  2EE5               	goto	l789
   913  06F4                     u340:
   914  06F4                     l795:
   915  06F4  3001               	movlw	1
   916  06F5                     u355:
   917  06F5  1003               	clrc
   918  06F6  0DF6               	rlf	___awdiv@quotient,f
   919  06F7  0DF7               	rlf	___awdiv@quotient+1,f
   920  06F8  3EFF               	addlw	-1
   921  06F9  1D03               	skipz
   922  06FA  2EF5               	goto	u355
   923  06FB  0871               	movf	___awdiv@divisor+1,w
   924  06FC  0273               	subwf	___awdiv@dividend+1,w
   925  06FD  1D03               	skipz
   926  06FE  2F01               	goto	u365
   927  06FF  0870               	movf	___awdiv@divisor,w
   928  0700  0272               	subwf	___awdiv@dividend,w
   929  0701                     u365:
   930  0701  1C03               	skipc
   931  0702  2F04               	goto	u361
   932  0703  2F05               	goto	u360
   933  0704                     u361:
   934  0704  2F0C               	goto	l801
   935  0705                     u360:
   936  0705                     l797:
   937  0705  0870               	movf	___awdiv@divisor,w
   938  0706  02F2               	subwf	___awdiv@dividend,f
   939  0707  0871               	movf	___awdiv@divisor+1,w
   940  0708  1C03               	skipc
   941  0709  03F3               	decf	___awdiv@dividend+1,f
   942  070A  02F3               	subwf	___awdiv@dividend+1,f
   943  070B                     l799:
   944  070B  1476               	bsf	___awdiv@quotient,0
   945  070C                     l801:
   946  070C  3001               	movlw	1
   947  070D                     u375:
   948  070D  1003               	clrc
   949  070E  0CF1               	rrf	___awdiv@divisor+1,f
   950  070F  0CF0               	rrf	___awdiv@divisor,f
   951  0710  3EFF               	addlw	-1
   952  0711  1D03               	skipz
   953  0712  2F0D               	goto	u375
   954  0713                     l803:
   955  0713  3001               	movlw	1
   956  0714  02F4               	subwf	___awdiv@counter,f
   957  0715  1D03               	btfss	3,2
   958  0716  2F18               	goto	u381
   959  0717  2F19               	goto	u380
   960  0718                     u381:
   961  0718  2EF4               	goto	l795
   962  0719                     u380:
   963  0719                     l805:
   964  0719  0875               	movf	___awdiv@sign,w
   965  071A  1903               	btfsc	3,2
   966  071B  2F1D               	goto	u391
   967  071C  2F1E               	goto	u390
   968  071D                     u391:
   969  071D  2F23               	goto	l809
   970  071E                     u390:
   971  071E                     l807:
   972  071E  09F6               	comf	___awdiv@quotient,f
   973  071F  09F7               	comf	___awdiv@quotient+1,f
   974  0720  0AF6               	incf	___awdiv@quotient,f
   975  0721  1903               	skipnz
   976  0722  0AF7               	incf	___awdiv@quotient+1,f
   977  0723                     l809:
   978  0723  0877               	movf	___awdiv@quotient+1,w
   979  0724  00F1               	movwf	?___awdiv+1
   980  0725  0876               	movf	___awdiv@quotient,w
   981  0726  00F0               	movwf	?___awdiv
   982  0727                     l282:
   983  0727  0008               	return
   984  0728                     __end_of___awdiv:
   985  007E                     btemp	set	126	;btemp
   986  007E                     wtemp0	set	126
   987                           
   988                           	psect	config
   989                           
   990                           ;Config register CONFIG @ 0x2007
   991                           ;	Oscillator Selection bits
   992                           ;	FOSC = HS, HS oscillator
   993                           ;	Watchdog Timer Enable bit
   994                           ;	WDTE = OFF, WDT disabled
   995                           ;	Power-up Timer Enable bit
   996                           ;	PWRTE = OFF, PWRT disabled
   997                           ;	Brown-out Reset Enable bit
   998                           ;	BOREN = ON, BOR enabled
   999                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1000                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1001                           ;	Data EEPROM Memory Code Protection bit
  1002                           ;	CPD = OFF, Data EEPROM code protection off
  1003                           ;	Flash Program Memory Write Enable bits
  1004                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1005                           ;	In-Circuit Debugger Mode bit
  1006                           ;	DEBUG = 0x1, unprogrammed default
  1007                           ;	Flash Program Memory Code Protection bit
  1008                           ;	CP = OFF, Code protection off
  1009  2007                     	org	8199
  1010  2007  3F7A               	dw	16250

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      0      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     900
                                              8 COMMON     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       A       5       12.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      12        0.0%
ABS                  0      0      17       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat Jul 29 15:09:05 2023

                      pc 0002                       l28 0772             ___awdiv@sign 0075  
                     fsr 0004                      l282 0727                      l295 06C0  
                    l801 070C                      l803 0713                      l805 0719  
                    l821 0674                      l813 0668                      l901 07DB  
                    l807 071E                      l831 068D                      l823 0678  
                    l815 0669                      l809 0723                      l841 06AC  
                    l833 0691                      l825 067D                      l817 066D  
                    l771 06C2                      l835 0695                      l827 0683  
                    l843 06B2                      l819 0672                      l851 0728  
                    l781 06D6                      l773 06C6                      l845 06B7  
                    l837 069F                      l829 0686                      l861 0734  
                    l853 072E                      l791 06EC                      l783 06DA  
                    l775 06CB                      l847 06BC                      l839 06A5  
                    l871 0748                      l863 0735                      l855 072F  
                    l793 06F0                      l785 06DC                      l777 06CD  
                    l769 06C1                      l881 076F                      l873 0755  
                    l865 0738                      l857 0732                      l795 06F4  
                    l787 06E2                      l779 06D1                      l891 0791  
                    l883 0776                      l875 0758                      l867 073E  
                    l859 0733                      l797 0705                      l789 06E5  
                    l893 079E                      l885 077A                      l877 0765  
                    l869 0742                      l799 070B                      l895 07A1  
                    l887 0780                      l879 0768                      l897 07AE  
                    l889 078D                      l899 07B1                      u300 06C6  
                    u301 06C5                      u310 06D1                      u311 06D0  
                    u320 06E2                      u400 066D                      u321 06E1  
                    u401 066C                      u410 0678                      u411 0677  
                    u340 06F4                      u420 0683                      u500 0742  
                    u341 06F3                      u421 0682                      u501 0741  
                    u510 0755                      u335 06E6                      u511 0754  
                    u360 0705                      u440 0695                      u520 0765  
                    u361 0704                      u441 0694                      u521 0764  
                    u450 069F                      u530 076F                      u355 06F5  
                    u451 069E                      u435 0687                      u531 076E  
                    u515 0751                      u380 0719                      u540 0776  
                    u381 0718                      u365 0701                      u541 0775  
                    u525 0761                      u390 071E                      u470 06B2  
                    u550 077A                      u391 071D                      u375 070D  
                    u471 06B1                      u455 069B                      u551 0779  
                    u480 06B7                      u560 078D                      u481 06B6  
                    u465 06A6                      u561 078C                      u570 079E  
                    u490 073E                      u571 079D                      u491 073D  
                    u580 07AE                      u581 07AD                      u565 0789  
                    u575 079A                      u585 07AA                      u597 07E1  
                    fsr0 0004                      indf 0000             ___awmod@sign 0075  
                   _main 0728                     btemp 007E                     start 0000  
                  ?_main 0070          __end_of___awdiv 0728          __end_of___awmod 06C1  
        ___awdiv@divisor 0070          ___awdiv@counter 0074                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _count 007B                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07EC  
           __end_of_main 07EC                   ??_main 0078         ___awdiv@dividend 0072  
              ??___awdiv 0074                ??___awmod 0074         ___awdiv@quotient 0076  
        ___awmod@divisor 0070          ___awmod@counter 0074  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 064B               __pmaintext 0728  
                ___awdiv 06C1                  ___awmod 0668                  __ptext1 0668  
                __ptext2 06C1         ___awmod@dividend 0072     end_of_initialization 07FC  
    start_initialization 07EC               init_fetch0 0655              __pdataBANK0 0020  
            __pbssCOMMON 007B                ___latbits 0002                 ?___awdiv 0070  
               ?___awmod 0070                 _ArrayLed 0020         __size_of___awdiv 0067  
       __size_of___awmod 0059            __size_of_main 00C4                 init_ram0 0659  
